// Generated Selenium page object
// Author: Jon Fast
// Last Modified Date: 7/15/2020

using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.PageObjects;
using OpenQA.Selenium.Support.UI;
using System;
using System.Collections.Generic;

namespace Selenium.Testing.PageObjects
{
    public class {{name}}
    {
        private readonly IWebDriver _driver;
        private readonly int _timeout = 15;
        private readonly string _pageUrl;
        private readonly string _pageTitle;

        /// <summary>
        /// Constructor
        /// </summary>
        public {{name}}(IWebDriver driver, string pageUrl, string pageTitle)
        {
            _driver = driver;
            _pageUrl = pageUrl;
            _pageTitle = pageTitle;
        }

        public {{name}} ConstructPage() {
            NavigateToPage()
                .VerifyPageLoaded()
                .VerifyPageUrl()
                .FillInitialValues();
            return this;
        }

        /// <summary>
        /// Navigate to the page that represents this control
        /// </summary>
        public {{name}} NavigateToPage()
        {
            _driver.Url = _pageUrl;
            _driver.Navigate();
            return this;
        }

        /// <summary>
        /// Verifies that the page loaded
        /// </summary>
        public {{name}} VerifyPageLoaded()
        {
            new WebDriverWait(_driver, TimeSpan.FromSeconds(_timeout))
                .Until(d => d.Title.Contains(_pageTitle));
            return this;
        }

        /// <summary>
        /// Verifies the page url
        /// </summary>
        public {{name}} VerifyPageUrl()
        {
            var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(_timeout));
            wait.Until(d =>
            {
                var url = d.Url.ToLowerInvariant();
                return url.Contains(_pageUrl.ToLowerInvariant());
            });
            return this;
        }

    {% for Inputs in root.InputElements %}
        /// <summary>
        /// Field type is: {{Inputs.TypeName}}
        /// </summary>
        public IWebElement {{Inputs.Id}} { get; set; }
    {% endfor %}
    
    {% for Selects in root.SelectElements %}
        /// <summary>
        /// Select box for {{Selects.Id}}
        /// </summary>
        public SelectElement {{Selects.Id}} { get; set; }
    {% endfor %}
    

        /// <summary>
        /// Fills initial values of all web elements
        /// </summary>
        public {{name}} FillInitialValues()
        {
    {% for Inputs in root.InputElements %}
            {{Inputs.Id}} = _driver.FindElement(By.Id("{{Inputs.Id}}"));
    {% endfor %}
    {% for Selects in root.SelectElements %}
            {{Selects.Id}} = new SelectElement(_driver.FindElement(By.Id("{{Selects.Id}}")));
    {% endfor %}
/*
    {% for Links in root.LinkElements %}
            // By.LinkText?
            {{Links.InternalValue}} = _driver.FindElement(By.CssSelector("a[href^='{{Links.Href}}']"));
    {% endfor %}
*/
            return this;
        }

    {% for Inputs in root.InputElements %}
        {% if Inputs.TypeName == "submit" %}
        /// <summary>
        /// Clicks on the submit button referenced by id {{Inputs.Id}}
        /// </summary>
        public {{name}} Submit_{{Inputs.Id}}()
        {
            // ensure attached 
            {{Inputs.Id}} = _driver.FindElement(By.Id("{{Inputs.Id}}"));
            
            // click the element
            {{Inputs.Id}}.Click();
            return this;
        }
        {% elsif Inputs.TypeName == "radio" %}
        public {{name}} Select_{{Inputs.Id}}()
        {
            // ensure attached 
            {{Inputs.Id}} = _driver.FindElement(By.Id("{{Inputs.Id}}"));
            
            // click the element
            {{Inputs.Id}}.Click();
            return this;
        }
        {% else %}
        /// <summary>
        /// Fills the input field referenced by id {{Inputs.Id}}
        /// </summary>
        public {{name}} Fill_{{Inputs.Id}}(string value)
        {
            try 
            {
                // ensure attached 
                {{Inputs.Id}} = _driver.FindElement(By.Id("{{Inputs.Id}}"));
                
                // clear old value and send new value to the web driver
                {{Inputs.Id}}.Clear();
                {{Inputs.Id}}.SendKeys(value);
            }
            catch (StaleElementReferenceException) 
            {
                Assert.Warn($"Selenium found {{Inputs.Id}} was not attached.");
            }
            catch (InvalidElementStateException)
            {
                Assert.Warn($"Selenium found that {{Inputs.Id}} was disabled or could not be manipulated at this time.");
            }
            return this;
        }
        {% endif %}
    {% endfor %}
/*
    {% for Links in root.LinkElements %}
        /// <summary>
        /// Link that points to {{Links.Href}}
        /// </summary>
        public IWebElement {{Links.Id}} { get; set; }
    {% endfor %}
*/
/*
    {% for Links in root.LinkElements %}
        /// <summary>
        /// Clicks the link for the element that points to {{Links.Href}}
        /// </summary>
        public {{name}} Click_{{Links.Id}}()
        {
            {{Links.Id}}.Click();
            return this;
        }
    {% endfor %}
*/
    {% for Selects in root.SelectElements %}
        /// <summary>
        /// Selects an element in {{Selects.Id}} by its textual value
        /// </summary>
        public {{name}} SelectValue_{{Selects.Id}}(string selection) 
        {
            var options = new List<string>
            { 
                {% for Options in Selects.Options %}
                {% if forloop.last == true %}"{{Options.Name}}" {% else %} "{{Options.Name}}", {% endif %}
                {% endfor %}
            };
            
            // check for an invalid option used
            // NOTE: may not work for dynamic elements
            if (!options.Contains(selection)) 
            {
                throw new Exception($"Invalid selection: {selection} for dropdown {{Selects.Id}}");
            }

            try 
            {
                // ensure attached
                {{Selects.Id}} = new SelectElement(_driver.FindElement(By.Id("{{Selects.Id}}")));
            
                // select the value from the dropdown by the literal value
                {{Selects.Id}}.SelectByText(selection);
            }
            catch (StaleElementReferenceException) 
            {
                Assert.Warn($"Selenium found {{Selects.Id}} was not attached.");
            }
            catch (InvalidElementStateException)
            {
                Assert.Warn($"Selenium found that {{Selects.Id}} was disabled or could not be manipulated at this time.");
            }
            return this;
        }
    {% endfor %}
    }
}